Please perform a SUCCINCT code review of the following changes.

First, here is the full context of the changed files:
```
{FULL_FILE_CONTEXT}
```

Now, here are the specific diffs for the changes:
```diff
{CODE_DIFF}
```

As an expert code reviewer, analyze the code and focus ONLY on:

1.  **Critical Issues:** Bugs, logic errors, security vulnerabilities, performance problems
2.  **Runtime Failures:** Missing error handling, null pointer risks, type errors
3.  **Major Code Smells:** Significant violations of best practices

**CRITICAL REQUIREMENTS:**
- **BE CONCISE:** Maximum 2-3 sentences per comment
- **ACTIONABLE ONLY:** Each comment must suggest a specific fix
- **NO NITPICKING:** Skip minor style issues, preference-based suggestions
- **DIRECT LANGUAGE:** Use imperative voice: "Add null check" not "Consider adding a null check"
- **FOCUS ON IMPACT:** Only comment on lines that could cause real problems
- **ONE ISSUE PER COMMENT:** Address one specific problem per comment

**SKIP THESE:**
- Code formatting and style preferences
- Subjective architecture opinions  
- Comments that don't suggest concrete improvements
- Lines that are already correct

**COMMENT FORMAT: Use Conventional Comments**
All feedback must follow the Conventional Comments format: `<label> [decorations]: <subject>`

**Available Labels:**
- **issue**: Problems that must be fixed (use with `(blocking)` for critical issues)
- **suggestion**: Proposed improvements (use `(non-blocking)` for minor suggestions)
- **todo**: Small, necessary changes before acceptance
- **question**: Genuine questions requiring answers
- **nitpick**: Minor, unimportant but potentially helpful changes (always `(non-blocking)`)
- **praise**: Highlight positive aspects (try to include at least one)
- **chore**: Simple tasks like linting or formatting
- **typo**: Spelling or grammar corrections
- **thought**: Non-blocking ideas or observations worth sharing
- **note**: Important information or clarifications (non-blocking)
- **polish**: Quality improvements that enhance but aren't critical

**Decorations:**
- **(blocking)**: Must be resolved before acceptance
- **(non-blocking)**: Should not prevent acceptance
- **(if-minor)**: Resolve only if changes are trivial

**Comment Examples:**
- `issue (blocking): This will cause a null pointer exception when user is null.`
- `suggestion: Extract this logic into a separate function for better readability.`
- `todo: Add error handling for this API call.`
- `question: Should this be async to avoid blocking the main thread?`
- `nitpick (non-blocking): Consider renaming this variable to be more descriptive.`
- `praise: Excellent use of the strategy pattern here!`
- `typo: "recieve" should be "receive".`
- `thought: This approach might not scale well with large datasets.`
- `note: This function is called from multiple places, be careful with changes.`
- `polish (non-blocking): Adding JSDoc would improve maintainability.`

Provide your feedback in a structured JSON format. The JSON object should have two keys: "summary" and "comments".
- The "summary" key should contain a high-level summary of the code review.
- The "comments" key should be an array of objects, where each object has "file", "line", and "comment" keys.
  - "file": The path of the file to comment on.
  - "line": The line number to comment on.
  - "comment": The comment text using Conventional Comments format.

Example JSON output:
```json
{
  "summary": "The changes implement the feature correctly but have some security and maintainability concerns that should be addressed.",
  "comments": [
    {
      "file": "src/auth.js",
      "line": 42,
      "comment": "issue (blocking): SQL injection vulnerability. Use parameterized queries instead of string concatenation."
    },
    {
      "file": "src/utils.js", 
      "line": 15,
      "comment": "suggestion: Extract this validation logic into a separate function for reusability."
    },
    {
      "file": "src/handler.js",
      "line": 28,
      "comment": "praise: Great error handling implementation with proper logging."
    },
    {
      "file": "README.md",
      "line": 5,
      "comment": "typo: \"dependecies\" should be \"dependencies\"."
    },
    {
      "file": "src/api.js",
      "line": 67,
      "comment": "todo: Add timeout configuration for this HTTP request."
    }
  ]
}
```
