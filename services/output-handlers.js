import { writeFileSync } from 'node:fs';
import { postCommentToMergeRequest, postLineCommentToMergeRequest } from '../api/gitlab.js';
import { getReviewStatistics } from './review-processor.js';

export function generateHtmlReport(parsedReview, llmChoice) {
	const stats = getReviewStatistics(parsedReview),

		html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Code Review Report - ${llmChoice.toUpperCase()}</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: #f8fafc; color: #1e293b; }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { background: white; border-radius: 8px; padding: 24px; margin-bottom: 24px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
        .title { font-size: 24px; font-weight: 600; margin-bottom: 8px; color: #0f172a; }
        .subtitle { color: #64748b; font-size: 14px; }
        .summary { background: white; border-radius: 8px; padding: 24px; margin-bottom: 24px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
        .summary h2 { font-size: 18px; margin-bottom: 16px; color: #0f172a; }
        .summary-text { line-height: 1.6; color: #334155; }
        .comments-section h2 { font-size: 18px; margin-bottom: 16px; color: #0f172a; }
        .comment { background: white; border-radius: 8px; padding: 20px; margin-bottom: 16px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); border-left: 4px solid #e2e8f0; }
        .comment.issue { border-left-color: #ef4444; }
        .comment.suggestion { border-left-color: #3b82f6; }
        .comment.todo { border-left-color: #f59e0b; }
        .comment.praise { border-left-color: #10b981; }
        .comment.question { border-left-color: #8b5cf6; }
        .comment.nitpick { border-left-color: #6b7280; }
        .comment-header { display: flex; align-items: center; margin-bottom: 12px; }
        .file-path { font-family: 'SF Mono', Consolas, monospace; font-size: 14px; color: #059669; font-weight: 500; }
        .line-number { background: #f1f5f9; color: #475569; padding: 2px 8px; border-radius: 4px; font-family: 'SF Mono', Consolas, monospace; font-size: 12px; margin-left: 12px; }
        .comment-text { line-height: 1.6; color: #334155; }
        .label { display: inline-block; padding: 2px 8px; border-radius: 12px; font-size: 12px; font-weight: 500; margin-right: 8px; }
        .label.issue { background: #fef2f2; color: #dc2626; }
        .label.suggestion { background: #eff6ff; color: #2563eb; }
        .label.todo { background: #fffbeb; color: #d97706; }
        .label.praise { background: #ecfdf5; color: #059669; }
        .label.question { background: #f3f4f6; color: #7c3aed; }
        .label.nitpick { background: #f9fafb; color: #4b5563; }
        .stats { display: flex; gap: 16px; margin-top: 16px; }
        .stat { background: #f8fafc; padding: 8px 16px; border-radius: 6px; text-align: center; }
        .stat-number { font-size: 18px; font-weight: 600; color: #0f172a; }
        .stat-label { font-size: 12px; color: #64748b; margin-top: 2px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="title">Code Review Report</div>
            <div class="subtitle">Generated by ${llmChoice.toUpperCase()} • ${new Date().toLocaleString()}</div>
            <div class="stats">
                <div class="stat">
                    <div class="stat-number">${stats.totalComments}</div>
                    <div class="stat-label">Comments</div>
                </div>
                <div class="stat">
                    <div class="stat-number">${stats.blockingIssues}</div>
                    <div class="stat-label">Blocking Issues</div>
                </div>
                <div class="stat">
                    <div class="stat-number">${stats.praiseCount}</div>
                    <div class="stat-label">Praise</div>
                </div>
            </div>
        </div>
        
        <div class="summary">
            <h2>Summary</h2>
            <div class="summary-text">${parsedReview.summary}</div>
        </div>
        
        <div class="comments-section">
            <h2>Detailed Comments</h2>
            ${parsedReview.comments.map((comment) => {
				const labelMatch = comment.comment.match(/^(\w+)(\s*\([^)]+\))?:/),
					label = labelMatch ? labelMatch[1] : 'note',
					commentText = comment.comment.replace(/^(\w+)(\s*\([^)]+\))?:\s*/, '');
				return `
                <div class="comment ${label}">
                    <div class="comment-header">
                        <span class="label ${label}">${label}</span>
                        <span class="file-path">${comment.file}</span>
                        <span class="line-number">Line ${comment.line}</span>
                    </div>
                    <div class="comment-text">${commentText}</div>
                </div>`;
			}).join('')}
        </div>
    </div>
</body>
</html>`;
	return html;
}

export function outputCliFormat(parsedReview, llmChoice) {
	const stats = getReviewStatistics(parsedReview);

	console.log(`\n${llmChoice.toUpperCase()} Code Review Results:\n`);
	console.log(parsedReview.summary);
	console.log('\nIssues found:\n');

	if (parsedReview.comments.length === 0) {
		console.log('  No issues found.');
		return;
	}

	for (const comment of parsedReview.comments) {
		const labelMatch = comment.comment.match(/^(\w+)(\s*\([^)]+\))?:/),
			label = labelMatch ? labelMatch[0] : 'note:',
			commentText = comment.comment.replace(/^(\w+)(\s*\([^)]+\))?:\s*/, '');

		console.log(`  ${comment.file}:${comment.line} ${label} ${commentText}`);
	}

	console.log(`\nSummary: ${stats.totalComments} comments (${stats.blockingIssues} blocking, ${stats.suggestions} suggestions)\n`);
}

export async function outputToGitLab(parsedReview, llmChoice, gitlabUrl, projectId, mergeRequestIid, baseSha, startSha, headSha) {
	console.log(`\n--- ${llmChoice.toUpperCase()} Code Review Summary ---\n`);
	console.log(parsedReview.summary);

	console.log(`\nPosting ${parsedReview.comments.length} comments to Merge Request...`);
	let successfulComments = 0,
		failedComments = 0;

	for (const comment of parsedReview.comments) {
		try {
			await postLineCommentToMergeRequest(
				gitlabUrl,
				projectId,
				mergeRequestIid,
				comment.comment,
				comment.file,
				comment.line,
				baseSha,
				startSha,
				headSha,
			);
			console.log(`✓ Posted comment to ${comment.file}:${comment.line}`);
			successfulComments++;
		} catch (commentError) {
			console.error(
				`✗ Failed to post comment to ${comment.file}:${comment.line}:`,
				commentError.message,
			);
			failedComments++;
		}
	}

	console.log(`Comment posting complete: ${successfulComments} successful, ${failedComments} failed`);

	console.log('Posting summary comment...');
	await postCommentToMergeRequest(
		gitlabUrl,
		projectId,
		mergeRequestIid,
		`## ${llmChoice.toUpperCase()} Code Review Summary\n\n${parsedReview.summary}`,
	);
	console.log('✓ Summary comment posted successfully.');
}

export async function handleOutput(outputFormat, parsedReview, llmChoice, gitlabParameters = null) {
	switch (outputFormat) {
		case 'html': {
			const html = generateHtmlReport(parsedReview, llmChoice),
				fileName = `code-review-${Date.now()}.html`;
			writeFileSync(fileName, html);
			console.log(`\n✓ HTML report generated: ${fileName}`);
			console.log(`\nSummary: ${parsedReview.comments.length} comments found`);
			break;
		}
		case 'cli': {
			outputCliFormat(parsedReview, llmChoice);
			break;
		}
		case 'gitlab': {
			if (!gitlabParameters) {
				throw new Error('GitLab parameters required for GitLab output. Use --output html or --output cli for local reviews.');
			}
			await outputToGitLab(
				parsedReview,
				llmChoice,
				gitlabParameters.gitlabUrl,
				gitlabParameters.projectId,
				gitlabParameters.mergeRequestIid,
				gitlabParameters.baseSha,
				gitlabParameters.startSha,
				gitlabParameters.headSha,
			);
			break;
		}
		default: {
			throw new Error(`Unsupported output format: ${outputFormat}`);
		}
	}
}
